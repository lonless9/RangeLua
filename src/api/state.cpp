/**
 * @file state.cpp
 * @brief State implementation
 * @version 0.1.0
 */

#include <rangelua/api/state.hpp>
#include <rangelua/frontend/lexer.hpp>
#include <rangelua/frontend/parser.hpp>
#include <rangelua/backend/codegen.hpp>
#include <rangelua/backend/bytecode.hpp>
#include <fstream>

namespace rangelua::api {

State::State() : vm_() {
    // TODO: Initialize state
}

Result<std::vector<runtime::Value>> State::execute(StringView code, String name) {
    try {
        // Lexical analysis
        frontend::Lexer lexer(code, std::move(name));

        // Syntax analysis
        frontend::Parser parser(lexer);
        auto ast_result = parser.parse();
        if (std::holds_alternative<ErrorCode>(ast_result)) {
            return std::get<ErrorCode>(ast_result);
        }

        // Code generation
        backend::BytecodeEmitter emitter;
        backend::CodeGenerator codegen(emitter);
        auto codegen_result = codegen.generate(*std::get<frontend::ProgramPtr>(ast_result));
        if (std::holds_alternative<ErrorCode>(codegen_result)) {
            return std::get<ErrorCode>(codegen_result);
        }

        // Get generated bytecode
        auto function = emitter.get_function();

        // Execute
        return vm_.execute(function);

    } catch (const Exception& e) {
        return e.code();
    } catch (...) {
        return ErrorCode::UNKNOWN_ERROR;
    }
}

Result<std::vector<runtime::Value>> State::execute_file(const String& filename) {
    std::ifstream file(filename);
    if (!file.is_open()) {
        return ErrorCode::IO_ERROR;
    }

    std::string content((std::istreambuf_iterator<char>(file)),
                        std::istreambuf_iterator<char>());

    return execute(content, filename);
}

Size State::stack_size() const noexcept {
    return vm_.stack_size();
}

void State::push(runtime::Value value) {
    vm_.push(std::move(value));
}

runtime::Value State::pop() {
    return vm_.pop();
}

const runtime::Value& State::top() const {
    return vm_.top();
}

} // namespace rangelua::api
